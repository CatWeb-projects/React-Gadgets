$base-font-size: 16px !default;
$rem-baseline: $base-font-size !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

// animations
@keyframes fade {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// A mixin that converts from px to rem
@function rem-separator($list) {
  @if function-exists('list-separator') ==true {
    @return list-separator($list);
  }
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }
  @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to== 'px' {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to== 'rem' {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == 'list' {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }
  @return if(length($result) ==1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// skeleton loader
@mixin skeleton {
  background: linear-gradient(-90deg, #efefef 0%, #fcfcfc 50%, #efefef 100%) !important;
  background-size: 400% 400% !important;
  animation: pulse 2s ease-in-out infinite;

  @keyframes pulse {
    0% {
      background-position: 0% 0%;
    }
    100% {
      background-position: -135% 0%;
    }
  }
}

// pulse
@mixin pulse($name, $color) {
  @keyframes #{$name} {
    0% {
      -moz-box-shadow: 0 0 0 0 rgba($color, 0.7);
      box-shadow: 0 0 0 0 rgba($color, 0.7);
    }
    70% {
      -moz-box-shadow: 0 0 0 10px rgba($color, 0);
      box-shadow: 0 0 0 10px rgba($color, 0);
    }
    100% {
      -moz-box-shadow: 0 0 0 0 rgba($color, 0);
      box-shadow: 0 0 0 0 rgba($color, 0);
    }
  }
}

// fade
@mixin fadeBackground($name, $color) {
  @keyframes #{$name} {
    from {
      background: rgba($color, 0);
    }
    to {
      background: rgba($color, 1);
    }
  }
}

@mixin fadeExactBackground($name, $color) {
  @keyframes #{$name} {
    from {
      background: rgba($color, 0);
    }
    to {
      background: $color;
    }
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.fade-in {
  animation: fadeIn 0.25s forwards;
}

@keyframes fadeRight {
  0% {
    transform: translateX(100%);
  }

  100% {
    transform: translateX(0);
  }
}
